
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  projectDesc: 'projectDesc',
  projectHistory: 'projectHistory',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deployedAt: 'deployedAt',
  ownerId: 'ownerId'
};

exports.Prisma.ProjectMetadataScalarFieldEnum = {
  id: 'id',
  identity: 'identity',
  instructions: 'instructions',
  tone: 'tone'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  timestamp: 'timestamp',
  role: 'role',
  content: 'content',
  temperature: 'temperature',
  metadata: 'metadata',
  files: 'files',
  userId: 'userId',
  projectId: 'projectId'
};

exports.Prisma.MCPConfigScalarFieldEnum = {
  id: 'id',
  mcpString: 'mcpString',
  authToken: 'authToken',
  configJson: 'configJson',
  userId: 'userId',
  projectId: 'projectId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Project: 'Project',
  ProjectMetadata: 'ProjectMetadata',
  Conversation: 'Conversation',
  MCPConfig: 'MCPConfig'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\sahil\\Downloads\\acemcp-dev\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\sahil\\Downloads\\acemcp-dev\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\" // Specifies that Prisma Client for JavaScript should be generated.\n  output   = \"../src/generated/prisma\" // The output directory for the generated client.\n}\n\ndatasource db {\n  provider  = \"postgresql\" // Specifies the database provider.\n  url       = env(\"DATABASE_URL\") // Connection URL for the database (loaded from environment variables).\n  directUrl = env(\"DIRECT_URL\") // Direct connection URL for tasks like migrations (loaded from environment variables).\n}\n\n// Model for Users. Handles authentication and user profile information.\nmodel User {\n  id            String    @id @default(uuid()) @db.Uuid // Unique identifier for the user, using UUIDs for consistency.\n  name          String? // The user's full name, optional.\n  email         String?   @unique // The user's email address, must be unique. Optional to support different login methods.\n  emailVerified DateTime? // Timestamp indicating when the user's email was verified.\n  image         String? // URL to the user's profile picture.\n  passwordHash  String? // Stores the hashed password for email/password authentication. NEVER store plaintext passwords.\n  createdAt     DateTime  @default(now()) // Timestamp for when the user account was created.\n  updatedAt     DateTime  @updatedAt // Timestamp for when the user account was last updated.\n\n  // --- Relationships ---\n  accounts      Account[] // Lists all linked OAuth accounts (Google, GitHub, etc.).\n  projects      Project[] // Lists all projects created by this user.\n  mcpConfigs    MCPConfig[] // Lists all MCP configurations created by this user.\n  conversations Conversation[] // Lists all conversations initiated by this user.\n}\n\n// Model for OAuth accounts, linking them to a User.\n// This allows a single user to log in via Google, GitHub, email, etc.\nmodel Account {\n  id                String  @id @default(uuid()) @db.Uuid // Unique identifier for the account link, using UUIDs for consistency.\n  userId            String  @db.Uuid // Foreign key linking to the User model.\n  type              String // The type of account, e.g., \"oauth\" or \"credentials\".\n  provider          String // The OAuth provider's name, e.g., \"google\", \"github\".\n  providerAccountId String // The user's ID as given by the OAuth provider.\n  refresh_token     String? @db.Text // The refresh token for the OAuth provider.\n  access_token      String? @db.Text // The access token for the OAuth provider.\n  expires_at        Int? // Expiry timestamp for the access token.\n  token_type        String? // The type of token, e.g., \"Bearer\".\n  scope             String? // The scope of permissions granted by the user.\n  id_token          String? @db.Text // The ID token from the OAuth provider.\n  session_state     String? // The session state from the OAuth provider.\n\n  // --- Relationships ---\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Links this account to a single user. Deleting the user deletes their accounts.\n\n  @@unique([provider, providerAccountId]) // Ensures a user can only link one account per provider.\n}\n\n// Model for Projects. Each project is a container for configurations and conversations.\nmodel Project {\n  id             String    @id @default(uuid()) @db.Uuid // Unique identifier for the project, using UUIDs.\n  name           String // The name of the project.\n  projectDesc    String? // An optional, user-provided description for the project.\n  projectHistory Json?     @map(\"project_history_json\") @db.JsonB // Optional JSON field to store a log of changes or events related to the project.\n  createdAt      DateTime  @default(now()) // Timestamp for when the project was created.\n  updatedAt      DateTime  @updatedAt // Timestamp for when the project was last updated.\n  deployedAt     DateTime? // Optional timestamp for when the project was last deployed.\n\n  // --- Relationships ---\n  ownerId        String           @db.Uuid // Foreign key for the user who owns the project.\n  owner          User             @relation(fields: [ownerId], references: [id]) // Links the project to its owner.\n  mcpConfigs     MCPConfig[] // A list of all MCP configurations associated with this project.\n  conversations  Conversation[] // A list of all conversations that belong to this project.\n  promptMetadata ProjectMetadata? // Links to the project's specific agent configuration.\n}\n\n// Model for the agent's core prompt configuration.\nmodel ProjectMetadata {\n  id           String  @id @db.Uuid // The primary key, which is also the foreign key to the Project.\n  identity     String? @db.Text // The persona of the AI agent, e.g., \"You are a helpful math tutor\".\n  instructions String? @db.Text // The specific instructions for the AI agent to follow.\n  tone         String? @db.Text // The desired tone for the AI agent's responses, e.g., \"casual and technical\".\n\n  // --- Relationships ---\n  // Establishes a one-to-one relationship where ProjectMetadata.id refers to Project.id.\n  project Project @relation(fields: [id], references: [id])\n}\n\n// Model for individual conversation turns or messages.\nmodel Conversation {\n  id          String   @id @default(uuid()) @db.Uuid // Unique identifier for the conversation message.\n  chatId      String // An identifier to group related messages into a single chat session.\n  timestamp   DateTime @default(now()) // Timestamp for when the message was created.\n  role        String // The role of the sender, e.g., \"user\" or \"assistant\".\n  content     String   @db.Text // The text content of the message.\n  temperature Float? // The temperature setting used for the model's response (e.g., 0.7).\n  metadata    Json?    @map(\"metadata_json\") @db.JsonB // JSON field to store metadata like identity, instructions, and tone.\n  files       Json?    @map(\"files_json\") @db.JsonB // BEST PRACTICE: Store file metadata here (e.g., URL from S3/GCS, filename, type) instead of storing files in the DB.\n\n  // --- Relationships ---\n  userId    String  @db.Uuid // Foreign key for the user who sent the message.\n  user      User    @relation(fields: [userId], references: [id]) // Links the message to the user.\n  projectId String  @db.Uuid // Foreign key for the project this conversation belongs to.\n  project   Project @relation(fields: [projectId], references: [id]) // Links the conversation to a project.\n}\n\n// Model for MCP (Model Configuration Profile) settings.\nmodel MCPConfig {\n  id         String @id @default(uuid()) @db.Uuid // Unique identifier for the MCP configuration.\n  mcpString  String // A string representing the MCP configuration.\n  authToken  String // The authentication token required for the MCP. Handle this securely.\n  configJson Json   @map(\"config_json\") @db.JsonB // The main configuration stored in JSON format.\n\n  // --- Relationships ---\n  userId    String  @db.Uuid // Foreign key for the user who created this configuration.\n  user      User    @relation(fields: [userId], references: [id]) // Links the config to its creator.\n  projectId String  @db.Uuid // Foreign key for the project this configuration applies to.\n  project   Project @relation(fields: [projectId], references: [id]) // Links the config to a project.\n}\n",
  "inlineSchemaHash": "b6b246033183a2e1beccf6c8e342a8143f4c72aa903eede374d04d07045f1c8b",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"projects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToUser\"},{\"name\":\"mcpConfigs\",\"kind\":\"object\",\"type\":\"MCPConfig\",\"relationName\":\"MCPConfigToUser\"},{\"name\":\"conversations\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToUser\"}],\"dbName\":null},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":null},\"Project\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectDesc\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectHistory\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"project_history_json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"deployedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProjectToUser\"},{\"name\":\"mcpConfigs\",\"kind\":\"object\",\"type\":\"MCPConfig\",\"relationName\":\"MCPConfigToProject\"},{\"name\":\"conversations\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToProject\"},{\"name\":\"promptMetadata\",\"kind\":\"object\",\"type\":\"ProjectMetadata\",\"relationName\":\"ProjectToProjectMetadata\"}],\"dbName\":null},\"ProjectMetadata\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"identity\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instructions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToProjectMetadata\"}],\"dbName\":null},\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"temperature\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"metadata_json\"},{\"name\":\"files\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"files_json\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationToUser\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ConversationToProject\"}],\"dbName\":null},\"MCPConfig\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mcpString\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"configJson\",\"kind\":\"scalar\",\"type\":\"Json\",\"dbName\":\"config_json\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MCPConfigToUser\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"MCPConfigToProject\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

